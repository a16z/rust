error[E0080]: it is undefined behavior to use this value
  --> $DIR/mutable_references.rs:13:1
   |
LL | static FOO: &&mut u32 = &&mut 42;
   | ^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>: encountered mutable reference or box pointing to read-only memory
   |
   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.
   = note: the raw bytes of the constant (size: $SIZE, align: $ALIGN) {
               HEX_DUMP
           }

error[E0080]: it is undefined behavior to use this value
  --> $DIR/mutable_references.rs:16:1
   |
LL | static OH_YES: &mut i32 = &mut 42;
   | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered mutable reference or box pointing to read-only memory
   |
   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.
   = note: the raw bytes of the constant (size: $SIZE, align: $ALIGN) {
               HEX_DUMP
           }

error: encountered mutable pointer in final value of static
  --> $DIR/mutable_references.rs:19:1
   |
LL | static BAR: &mut () = &mut ();
   | ^^^^^^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #122153 <https://github.com/rust-lang/rust/issues/122153>
note: the lint level is defined here
  --> $DIR/mutable_references.rs:6:9
   |
LL | #![deny(const_eval_mutable_ptr_in_final_value)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: encountered mutable pointer in final value of static
  --> $DIR/mutable_references.rs:25:1
   |
LL | static BOO: &mut Foo<()> = &mut Foo(());
   | ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #122153 <https://github.com/rust-lang/rust/issues/122153>

error[E0080]: it is undefined behavior to use this value
  --> $DIR/mutable_references.rs:29:1
   |
LL | const BLUNT: &mut i32 = &mut 42;
   | ^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered mutable reference or box pointing to read-only memory
   |
   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.
   = note: the raw bytes of the constant (size: $SIZE, align: $ALIGN) {
               HEX_DUMP
           }

error[E0080]: it is undefined behavior to use this value
  --> $DIR/mutable_references.rs:33:1
   |
LL | const SUBTLE: &mut i32 = unsafe { static mut STATIC: i32 = 0; &mut STATIC };
   | ^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered reference to mutable memory in `const`
   |
   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.
   = note: the raw bytes of the constant (size: $SIZE, align: $ALIGN) {
               HEX_DUMP
           }

error[E0080]: it is undefined behavior to use this value
  --> $DIR/mutable_references.rs:43:1
   |
LL | static MEH: Meh = Meh { x: &UnsafeCell::new(42) };
   | ^^^^^^^^^^^^^^^ constructing invalid value at .x.<deref>: encountered `UnsafeCell` in read-only memory
   |
   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.
   = note: the raw bytes of the constant (size: $SIZE, align: $ALIGN) {
               HEX_DUMP
           }

error[E0080]: it is undefined behavior to use this value
  --> $DIR/mutable_references.rs:49:1
   |
LL | const MUH: Meh = Meh {
   | ^^^^^^^^^^^^^^ constructing invalid value at .x.<deref>: encountered `UnsafeCell` in read-only memory
   |
   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.
   = note: the raw bytes of the constant (size: $SIZE, align: $ALIGN) {
               HEX_DUMP
           }

error[E0080]: it is undefined behavior to use this value
  --> $DIR/mutable_references.rs:61:1
   |
LL | const SNEAKY: &dyn Sync = &Synced { x: UnsafeCell::new(42) };
   | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>.<dyn-downcast>.x: encountered `UnsafeCell` in read-only memory
   |
   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.
   = note: the raw bytes of the constant (size: $SIZE, align: $ALIGN) {
               HEX_DUMP
           }

error[E0080]: it is undefined behavior to use this value
  --> $DIR/mutable_references.rs:68:1
   |
LL | static mut MUT_TO_READONLY: &mut i32 = unsafe { &mut *(&READONLY as *const _ as *mut _) };
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered mutable reference or box pointing to read-only memory
   |
   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.
   = note: the raw bytes of the constant (size: $SIZE, align: $ALIGN) {
               HEX_DUMP
           }

error[E0080]: it is undefined behavior to use this value
  --> $DIR/mutable_references.rs:75:1
   |
LL | const POINTS_TO_MUTABLE: &i32 = unsafe { &MUTABLE };
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered reference to mutable memory in `const`
   |
   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.
   = note: the raw bytes of the constant (size: $SIZE, align: $ALIGN) {
               HEX_DUMP
           }

error[E0080]: evaluation of constant value failed
  --> $DIR/mutable_references.rs:78:43
   |
LL | const POINTS_TO_MUTABLE2: &i32 = unsafe { &*MUTABLE_REF };
   |                                           ^^^^^^^^^^^^^ constant accesses mutable global memory

error: encountered mutable pointer in final value of constant
  --> $DIR/mutable_references.rs:82:1
   |
LL | const POINTS_TO_MUTABLE_INNER: *const i32 = &mut 42 as *mut _ as *const _;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #122153 <https://github.com/rust-lang/rust/issues/122153>

error: encountered mutable pointer in final value of constant
  --> $DIR/mutable_references.rs:86:1
   |
LL | const POINTS_TO_MUTABLE_INNER2: *const i32 = &mut 42 as *const _;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #122153 <https://github.com/rust-lang/rust/issues/122153>

error: encountered mutable pointer in final value of constant
  --> $DIR/mutable_references.rs:90:1
   |
LL | const INTERIOR_MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #122153 <https://github.com/rust-lang/rust/issues/122153>

error: encountered mutable pointer in final value of constant
  --> $DIR/mutable_references.rs:103:1
   |
LL | const RAW_SYNC: SyncPtr<AtomicI32> = SyncPtr { x: &AtomicI32::new(42) };
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #122153 <https://github.com/rust-lang/rust/issues/122153>

error: encountered mutable pointer in final value of constant
  --> $DIR/mutable_references.rs:107:1
   |
LL | const RAW_MUT_CAST: SyncPtr<i32> = SyncPtr { x: &mut 42 as *mut _ as *const _ };
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #122153 <https://github.com/rust-lang/rust/issues/122153>

error: encountered mutable pointer in final value of constant
  --> $DIR/mutable_references.rs:111:1
   |
LL | const RAW_MUT_COERCE: SyncPtr<i32> = SyncPtr { x: &mut 0 };
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #122153 <https://github.com/rust-lang/rust/issues/122153>

error[E0594]: cannot assign to `*OH_YES`, as `OH_YES` is an immutable static item
  --> $DIR/mutable_references.rs:120:5
   |
LL |     *OH_YES = 99;
   |     ^^^^^^^^^^^^ cannot assign

warning: skipping const checks
   |
help: skipping check that does not even have a feature gate
  --> $DIR/mutable_references.rs:13:26
   |
LL | static FOO: &&mut u32 = &&mut 42;
   |                          ^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/mutable_references.rs:16:27
   |
LL | static OH_YES: &mut i32 = &mut 42;
   |                           ^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/mutable_references.rs:19:23
   |
LL | static BAR: &mut () = &mut ();
   |                       ^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/mutable_references.rs:25:28
   |
LL | static BOO: &mut Foo<()> = &mut Foo(());
   |                            ^^^^^^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/mutable_references.rs:29:25
   |
LL | const BLUNT: &mut i32 = &mut 42;
   |                         ^^^^^^^
help: skipping check for `const_refs_to_static` feature
  --> $DIR/mutable_references.rs:33:68
   |
LL | const SUBTLE: &mut i32 = unsafe { static mut STATIC: i32 = 0; &mut STATIC };
   |                                                                    ^^^^^^
help: skipping check for `const_mut_refs` feature
  --> $DIR/mutable_references.rs:33:63
   |
LL | const SUBTLE: &mut i32 = unsafe { static mut STATIC: i32 = 0; &mut STATIC };
   |                                                               ^^^^^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/mutable_references.rs:43:28
   |
LL | static MEH: Meh = Meh { x: &UnsafeCell::new(42) };
   |                            ^^^^^^^^^^^^^^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/mutable_references.rs:52:8
   |
LL |     x: &UnsafeCell::new(42),
   |        ^^^^^^^^^^^^^^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/mutable_references.rs:61:27
   |
LL | const SNEAKY: &dyn Sync = &Synced { x: UnsafeCell::new(42) };
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: skipping check for `const_mut_refs` feature
  --> $DIR/mutable_references.rs:68:49
   |
LL | static mut MUT_TO_READONLY: &mut i32 = unsafe { &mut *(&READONLY as *const _ as *mut _) };
   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: skipping check for `const_mut_refs` feature
  --> $DIR/mutable_references.rs:68:49
   |
LL | static mut MUT_TO_READONLY: &mut i32 = unsafe { &mut *(&READONLY as *const _ as *mut _) };
   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: skipping check for `const_refs_to_static` feature
  --> $DIR/mutable_references.rs:75:43
   |
LL | const POINTS_TO_MUTABLE: &i32 = unsafe { &MUTABLE };
   |                                           ^^^^^^^
help: skipping check for `const_refs_to_static` feature
  --> $DIR/mutable_references.rs:78:45
   |
LL | const POINTS_TO_MUTABLE2: &i32 = unsafe { &*MUTABLE_REF };
   |                                             ^^^^^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/mutable_references.rs:82:45
   |
LL | const POINTS_TO_MUTABLE_INNER: *const i32 = &mut 42 as *mut _ as *const _;
   |                                             ^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/mutable_references.rs:86:46
   |
LL | const POINTS_TO_MUTABLE_INNER2: *const i32 = &mut 42 as *const _;
   |                                              ^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/mutable_references.rs:90:47
   |
LL | const INTERIOR_MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;
   |                                               ^^^^^^^^^^^^^^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/mutable_references.rs:103:51
   |
LL | const RAW_SYNC: SyncPtr<AtomicI32> = SyncPtr { x: &AtomicI32::new(42) };
   |                                                   ^^^^^^^^^^^^^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/mutable_references.rs:107:49
   |
LL | const RAW_MUT_CAST: SyncPtr<i32> = SyncPtr { x: &mut 42 as *mut _ as *const _ };
   |                                                 ^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/mutable_references.rs:111:51
   |
LL | const RAW_MUT_COERCE: SyncPtr<i32> = SyncPtr { x: &mut 0 };
   |                                                   ^^^^^^

error: aborting due to 19 previous errors; 1 warning emitted

Some errors have detailed explanations: E0080, E0594.
For more information about an error, try `rustc --explain E0080`.
Future incompatibility report: Future breakage diagnostic:
error: encountered mutable pointer in final value of static
  --> $DIR/mutable_references.rs:19:1
   |
LL | static BAR: &mut () = &mut ();
   | ^^^^^^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #122153 <https://github.com/rust-lang/rust/issues/122153>
note: the lint level is defined here
  --> $DIR/mutable_references.rs:6:9
   |
LL | #![deny(const_eval_mutable_ptr_in_final_value)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Future breakage diagnostic:
error: encountered mutable pointer in final value of static
  --> $DIR/mutable_references.rs:25:1
   |
LL | static BOO: &mut Foo<()> = &mut Foo(());
   | ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #122153 <https://github.com/rust-lang/rust/issues/122153>
note: the lint level is defined here
  --> $DIR/mutable_references.rs:6:9
   |
LL | #![deny(const_eval_mutable_ptr_in_final_value)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Future breakage diagnostic:
error: encountered mutable pointer in final value of constant
  --> $DIR/mutable_references.rs:82:1
   |
LL | const POINTS_TO_MUTABLE_INNER: *const i32 = &mut 42 as *mut _ as *const _;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #122153 <https://github.com/rust-lang/rust/issues/122153>
note: the lint level is defined here
  --> $DIR/mutable_references.rs:6:9
   |
LL | #![deny(const_eval_mutable_ptr_in_final_value)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Future breakage diagnostic:
error: encountered mutable pointer in final value of constant
  --> $DIR/mutable_references.rs:86:1
   |
LL | const POINTS_TO_MUTABLE_INNER2: *const i32 = &mut 42 as *const _;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #122153 <https://github.com/rust-lang/rust/issues/122153>
note: the lint level is defined here
  --> $DIR/mutable_references.rs:6:9
   |
LL | #![deny(const_eval_mutable_ptr_in_final_value)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Future breakage diagnostic:
error: encountered mutable pointer in final value of constant
  --> $DIR/mutable_references.rs:90:1
   |
LL | const INTERIOR_MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #122153 <https://github.com/rust-lang/rust/issues/122153>
note: the lint level is defined here
  --> $DIR/mutable_references.rs:6:9
   |
LL | #![deny(const_eval_mutable_ptr_in_final_value)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Future breakage diagnostic:
error: encountered mutable pointer in final value of constant
  --> $DIR/mutable_references.rs:103:1
   |
LL | const RAW_SYNC: SyncPtr<AtomicI32> = SyncPtr { x: &AtomicI32::new(42) };
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #122153 <https://github.com/rust-lang/rust/issues/122153>
note: the lint level is defined here
  --> $DIR/mutable_references.rs:6:9
   |
LL | #![deny(const_eval_mutable_ptr_in_final_value)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Future breakage diagnostic:
error: encountered mutable pointer in final value of constant
  --> $DIR/mutable_references.rs:107:1
   |
LL | const RAW_MUT_CAST: SyncPtr<i32> = SyncPtr { x: &mut 42 as *mut _ as *const _ };
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #122153 <https://github.com/rust-lang/rust/issues/122153>
note: the lint level is defined here
  --> $DIR/mutable_references.rs:6:9
   |
LL | #![deny(const_eval_mutable_ptr_in_final_value)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Future breakage diagnostic:
error: encountered mutable pointer in final value of constant
  --> $DIR/mutable_references.rs:111:1
   |
LL | const RAW_MUT_COERCE: SyncPtr<i32> = SyncPtr { x: &mut 0 };
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #122153 <https://github.com/rust-lang/rust/issues/122153>
note: the lint level is defined here
  --> $DIR/mutable_references.rs:6:9
   |
LL | #![deny(const_eval_mutable_ptr_in_final_value)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

