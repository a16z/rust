error[E0308]: mismatched types
  --> $DIR/ref_pat_eat_one_layer_2024_fail.rs:9:17
   |
LL |     if let Some(&mut Some(&_)) = &Some(&Some(0)) {
   |                 ^^^^^
   |
   = note: cannot match inherited `&` with `&mut` pattern
help: replace this `&mut` pattern with `&`
   |
LL |     if let Some(&Some(&_)) = &Some(&Some(0)) {
   |                 ~

error[E0308]: mismatched types
  --> $DIR/ref_pat_eat_one_layer_2024_fail.rs:12:23
   |
LL |     if let Some(&Some(&mut _)) = &Some(&mut Some(0)) {
   |                       ^^^^^
   |
   = note: cannot match inherited `&` with `&mut` pattern
help: replace this `&mut` pattern with `&`
   |
LL |     if let Some(&Some(&_)) = &Some(&mut Some(0)) {
   |                       ~

error[E0308]: mismatched types
  --> $DIR/ref_pat_eat_one_layer_2024_fail.rs:16:27
   |
LL |         let _: &mut u32 = x;
   |                --------   ^ types differ in mutability
   |                |
   |                expected due to this
   |
   = note: expected mutable reference `&mut u32`
                      found reference `&{integer}`

error[E0308]: mismatched types
  --> $DIR/ref_pat_eat_one_layer_2024_fail.rs:19:23
   |
LL |     if let Some(&Some(&mut _)) = &mut Some(&Some(0)) {
   |                       ^^^^^
   |
   = note: cannot match inherited `&` with `&mut` pattern
help: replace this `&mut` pattern with `&`
   |
LL |     if let Some(&Some(&_)) = &mut Some(&Some(0)) {
   |                       ~

error[E0308]: mismatched types
  --> $DIR/ref_pat_eat_one_layer_2024_fail.rs:22:29
   |
LL |     if let Some(&Some(Some((&mut _)))) = &Some(Some(&mut Some(0))) {
   |                             ^^^^^
   |
   = note: cannot match inherited `&` with `&mut` pattern
help: replace this `&mut` pattern with `&`
   |
LL |     if let Some(&Some(Some((&_)))) = &Some(Some(&mut Some(0))) {
   |                             ~

error[E0308]: mismatched types
  --> $DIR/ref_pat_eat_one_layer_2024_fail.rs:25:17
   |
LL |     if let Some(&mut Some(x)) = &Some(Some(0)) {
   |                 ^^^^^
   |
   = note: cannot match inherited `&` with `&mut` pattern
help: replace this `&mut` pattern with `&`
   |
LL |     if let Some(&Some(x)) = &Some(Some(0)) {
   |                 ~

error[E0308]: mismatched types
  --> $DIR/ref_pat_eat_one_layer_2024_fail.rs:28:17
   |
LL |     if let Some(&mut Some(x)) = &Some(Some(0)) {
   |                 ^^^^^
   |
   = note: cannot match inherited `&` with `&mut` pattern
help: replace this `&mut` pattern with `&`
   |
LL |     if let Some(&Some(x)) = &Some(Some(0)) {
   |                 ~

error[E0308]: mismatched types
  --> $DIR/ref_pat_eat_one_layer_2024_fail.rs:32:9
   |
LL |     let &mut _ = &&0;
   |         ^^^^^^   --- this expression has type `&&{integer}`
   |         |
   |         types differ in mutability
   |
   = note:      expected reference `&&{integer}`
           found mutable reference `&mut _`

error[E0308]: mismatched types
  --> $DIR/ref_pat_eat_one_layer_2024_fail.rs:35:9
   |
LL |     let &mut _ = &&&&&&&&&&&&&&&&&&&&&&&&&&&&0;
   |         ^^^^^^   ----------------------------- this expression has type `&&&&&&&&&&&&&&&&&&&&&&&&&&&&{integer}`
   |         |
   |         types differ in mutability
   |
   = note:      expected reference `&&&&&&&&&&&&&&&&&&&&&&&&&&&&{integer}`
           found mutable reference `&mut _`

error[E0308]: mismatched types
  --> $DIR/ref_pat_eat_one_layer_2024_fail.rs:38:17
   |
LL |     if let Some(&mut Some(&_)) = &Some(&mut Some(0)) {
   |                 ^^^^^
   |
   = note: cannot match inherited `&` with `&mut` pattern
help: replace this `&mut` pattern with `&`
   |
LL |     if let Some(&Some(&_)) = &Some(&mut Some(0)) {
   |                 ~

error[E0308]: mismatched types
  --> $DIR/ref_pat_eat_one_layer_2024_fail.rs:42:22
   |
LL |     if let Some(Some(&mut x)) = &Some(Some(&mut 0)) {
   |                      ^^^^^
   |
   = note: cannot match inherited `&` with `&mut` pattern
help: replace this `&mut` pattern with `&`
   |
LL |     if let Some(Some(&x)) = &Some(Some(&mut 0)) {
   |                      ~

error[E0308]: mismatched types
  --> $DIR/ref_pat_eat_one_layer_2024_fail.rs:46:9
   |
LL |     let &mut _ = &&mut 0;
   |         ^^^^^^   ------- this expression has type `&&mut {integer}`
   |         |
   |         types differ in mutability
   |
   = note:      expected reference `&&mut {integer}`
           found mutable reference `&mut _`

error[E0308]: mismatched types
  --> $DIR/ref_pat_eat_one_layer_2024_fail.rs:49:9
   |
LL |     let &mut _ = &&&&&&&&&&&&&&&&&&&&&&&&&&&&mut 0;
   |         ^^^^^^   --------------------------------- this expression has type `&&&&&&&&&&&&&&&&&&&&&&&&&&&&mut {integer}`
   |         |
   |         types differ in mutability
   |
   = note:      expected reference `&&&&&&&&&&&&&&&&&&&&&&&&&&&&mut {integer}`
           found mutable reference `&mut _`

error[E0308]: mismatched types
  --> $DIR/ref_pat_eat_one_layer_2024_fail.rs:52:14
   |
LL |     let &mut &mut &mut &mut _ = &mut &&&&mut &&&mut &mut 0;
   |              ^^^^^^^^^^^^^^^^   -------------------------- this expression has type `&mut &&&&mut &&&mut &mut {integer}`
   |              |
   |              types differ in mutability
   |
   = note:      expected reference `&&&&mut &&&mut &mut {integer}`
           found mutable reference `&mut _`

error[E0658]: binding cannot be both mutable and by-reference
  --> $DIR/ref_pat_eat_one_layer_2024_fail.rs:61:13
   |
LL |     let Foo(mut a) = &Foo(0);
   |             ^^^^
   |
   = note: see issue #123076 <https://github.com/rust-lang/rust/issues/123076> for more information
   = help: add `#![feature(mut_ref)]` to the crate attributes to enable
   = note: this compiler was built on YYYY-MM-DD; consider upgrading it if it is out of date

error[E0658]: binding cannot be both mutable and by-reference
  --> $DIR/ref_pat_eat_one_layer_2024_fail.rs:65:13
   |
LL |     let Foo(mut a) = &mut Foo(0);
   |             ^^^^
   |
   = note: see issue #123076 <https://github.com/rust-lang/rust/issues/123076> for more information
   = help: add `#![feature(mut_ref)]` to the crate attributes to enable
   = note: this compiler was built on YYYY-MM-DD; consider upgrading it if it is out of date

error[E0277]: the trait bound `&_: main::Ref` is not satisfied
  --> $DIR/ref_pat_eat_one_layer_2024_fail.rs:83:14
   |
LL |     let &_ = generic();
   |              ^^^^^^^^^ the trait `main::Ref` is not implemented for `&_`
   |
   = help: the trait `main::Ref` is implemented for `&'static mut [(); 0]`
note: required by a bound in `generic`
  --> $DIR/ref_pat_eat_one_layer_2024_fail.rs:69:19
   |
LL |     fn generic<R: Ref>() -> R {
   |                   ^^^ required by this bound in `generic`

error: aborting due to 17 previous errors

Some errors have detailed explanations: E0277, E0308, E0658.
For more information about an error, try `rustc --explain E0277`.
